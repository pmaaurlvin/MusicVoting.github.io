@{
    ViewData["Title"] = "Privacy Policy";
}


<div class="_s-b">
    <input class="search-bar" type="text" id="search-input" placeholder="nach Track oder Artist suchen" />
</div>
<div class="popup-windows invisible i">Du hast diesen Song bereits hinzugefügt.
    <div class="progress-bar"></div>
</div>
<div class="overlay"></div>
<div class="results" id="search-results"></div>

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />



@section scripts {
    <script>


        let selectedTracks = [];
        //let selectedTracks = {};
        
        const searchInput = document.getElementById('search-input');
        const searchResults = document.getElementById('search-results');
        let accessToken = '';

        function getAccessToken() {
            const url = 'https://accounts.spotify.com/api/token';
            const clientId = '0de4927c153046faa9c9b71dd370ea67';
            const clientSecret = '5a2c9e210bf04e0fbe9e29ae90e463db';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)
                },
                body: 'grant_type=client_credentials'
            })
                .then(response => response.json())
                .then(data => {
                    accessToken = data.access_token;
                })
                .catch(error => console.error(error));
            console.log("ACCESS_TOKEN: ", accessToken);
        }

        let currentAudio;
        let currentTrackId;

        function playPreview(url, trackId) {
            if (currentTrackId && currentTrackId !== trackId) {
                const pauseBtn = document.getElementById(`pause-${currentTrackId}`);
                const playBtn = document.getElementById(`play-${currentTrackId}`);
                if (pauseBtn && playBtn) {
                    pauseBtn.classList.add("invisible");
                    playBtn.classList.remove("invisible");
                }
                if (currentAudio) {
                    currentAudio.pause();
                    currentAudio.currentTime = 0;
                }
            }
            currentTrackId = trackId;
            const pauseBtn = document.getElementById(`pause-${trackId}`);
            const playBtn = document.getElementById(`play-${trackId}`);
            if (currentAudio && currentAudio.src === url) {
                if (currentAudio.paused) {
                    currentAudio.play();
                    pauseBtn.classList.remove("invisible");
                    playBtn.classList.add("invisible");
                } else {
                    currentAudio.pause();
                    currentAudio.currentTime = 0;
                    pauseBtn.classList.add("invisible");
                    playBtn.classList.remove("invisible");
                }
            } else {
                if (currentAudio) {
                    const prevPauseBtn = document.getElementById(`pause-${currentTrackId}`);
                    const prevPlayBtn = document.getElementById(`play-${currentTrackId}`);
                    if (prevPauseBtn && prevPlayBtn) {
                        prevPauseBtn.classList.add("invisible");
                        prevPlayBtn.classList.remove("invisible");
                    }
                    currentAudio.pause();
                    currentAudio.currentTime = 0;
                }
                currentAudio = new Audio(url);
                currentAudio.volume = 0.45;
                currentAudio.play();
                pauseBtn.classList.remove("invisible");
                playBtn.classList.add("invisible");
                currentAudio.addEventListener('ended', function() 
                {
                    pauseBtn.classList.add("invisible");
                    playBtn.classList.remove("invisible");
                });
            }
        }


        searchInput.addEventListener('input', function () {
            const query = encodeURIComponent(searchInput.value);
            if (query.trim() === '') {
                searchResults.innerHTML = '';
                return;
            }

            if (accessToken === '') {
                getAccessToken();
                return;
            }

            const url = `https://api.spotify.com/v1/search?q=${query}&type=track`;

            fetch(url, {
                headers: {
                    'Authorization': 'Bearer ' + accessToken
                }
            })
                .then(response => response.json())
                .then(data => {
                    const tracks = data.tracks.items;
                    const results = [];

                    for (let track of tracks) {
                        results.push(`
                        <div class="searchres">
                            <div class="_coverimg">
                                <img class="cover-img" src="${track.album.images[0].url}" alt="${track.album.name}" style="width: 14vw; height: 14vw;" onclick="playPreview('${track.preview_url}', '${track.id}')">
                                <span class="material-symbols-rounded" onclick="playPreview('${track.preview_url}', '${track.id}')" id="play-${track.id}">
                                    play_arrow
                                </span>
                                <span class="material-symbols-rounded invisible" onclick="playPreview('${track.preview_url}', '${track.id}')" id="pause-${track.id}">
                                    pause
                                </span>
                            </div>
                            <div class="_trackdata">
                                <div class="_trackname">
                                    <h1 class="name">${track.name}</h1>
                                </div>
                                <span class="_artistname">
                                    <h2 class="_artist">${track.artists.map(artist => artist.name).join(', ')}</h2>
                                </span>                                
                            </div>
                            <div class="_votebtns">
                                <button class="votebtn" id="votebtn-${track.id}" onclick="sendVote('${track.id}')">HINZUFÜGEN</button>
                            </div>                            
                        </div>`);
                        
                    }

                    searchResults.innerHTML = results.join('');
                })
                .catch(error => console.error(error));
        });


                
        //new
        function sendVote(trackId) 
        {
            var $addbutton;
            $addbutton = $('#votebtn-' + trackId);

            const index = selectedTracks.findIndex(track => track.id === trackId);
            if (index === -1) 
            {
                selectedTracks.push({ id: trackId, count: 1 });                
            } 
            else 
            {
                selectedTracks[index].count++;                
            }
            console.log(selectedTracks); // this will log the array to the console for testing purposes

                                 
            
            //AJAX ----------------------------------------
            //const selectedTracksJson = encodeURIComponent(JSON.stringify(selectedTracks));
            //const url = '/Votes/SaveVotes?selectedTracks=' + selectedTracksJson;
            const url = `/Votes/SaveVotes?trackId=${encodeURIComponent(trackId)}`;

            $.ajax({
                type: 'POST',
                url: url,
                success: function(result) 
                {
                    console.log("a");
                    // Handle success
                    if (result.voteAdded){
                        $addbutton.addClass('added_btn');
                        console.log("b");
                    }
                    else if (!result.voteAdded)
                    {

                        console.log("c");
                        $('.popup-windows').removeClass('invisible').addClass('active').removeClass('i');
                        $('.progress-bar').addClass('active');
                        setTimeout(function() {
                            $('.popup-windows').removeClass('active').addClass('invisible').addClass('i');
                            $('.progress-bar').removeClass('active');
                            console.log('Timeout');
                        }, 3000);
                    }
                },
                error: function(error) 
                {
                    // Handle error
                    console.log("d");
                    
                }
        
            });
            console.log("Transmitted!" + selectedTracks);





        }


        



        


    </script>

    <!--NEW-->
    <script>
    
}
</script>


}