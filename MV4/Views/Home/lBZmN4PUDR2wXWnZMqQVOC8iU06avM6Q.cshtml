@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@using System.Net;
@using System.Text;
@using System.Web;
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.AspNetCore.Mvc;
@using MV4.Models;
@using MV4.Controllers;
@using System.Net.Http.Headers;

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />




@{
    ViewData["Title"] = "lBZmN4PUDR2wXWnZMqQVOC8iU06avM6Q";
}

@{
    // Read the JSON file
    string jsonFilePath = "votes.json";
    string jsonData = System.IO.File.ReadAllText(jsonFilePath);
    JArray votes = JArray.Parse(jsonData);

    // Sort the votes array by count in descending order
    votes = new JArray(votes.OrderByDescending(v => (int)v["count"]).ToList());
    int i = 0;
    bool noVotes = false;

    int pnumber = 0;   

}

<h1 class="resheading">ALLE SONGS</h1>

<div class="xsongs">
    <div class ="xdivnum">
        <h1 class="listPosition">#</h1>
    </div>
    <div class="xdivcount">
        <h1 class="xcount"></h1>
    </div>
    <div class="xdivimg">
        <h1 class="xcover"></h1>
        <span class="material-symbols-outlined">
        music_note
        </span>
    </div>
    <div class="xdivdata">
        <h1 class="xTA">Titel, Artist</h1>
    </div>
    <div class="xdivbuttons">
        <h1 class="xV">Votes</h1>
    </div>
</div>




<table>
    <thead>

    </thead>
    <tbody>
        @foreach (JObject vote in votes)   //JObject
        {
            string votenum = vote["count"].ToString();
            int votenumInt = int.Parse(votenum);
            if (votenumInt == 0)
            {
                Console.WriteLine("Track has 0 votes" + votenumInt);
                noVotes = true;              //Stop Listing Tracks if Votes = 0                
            }

            if (noVotes == false)   // Max Number of Displayed tracks
            {
                i++;
                // Replace YOUR_CLIENT_ID and YOUR_CLIENT_SECRET with your Spotify client ID and client secret
                var clientId = "0de4927c153046faa9c9b71dd370ea67";
                var clientSecret = "5a2c9e210bf04e0fbe9e29ae90e463db";

                // Build the request to retrieve an access token using the client credentials flow
                var tokenRequest = new HttpRequestMessage(HttpMethod.Post, "https://accounts.spotify.com/api/token");
                var credentials = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{clientId}:{clientSecret}"));
                tokenRequest.Headers.Authorization = new AuthenticationHeaderValue("Basic", credentials);
                tokenRequest.Content = new FormUrlEncodedContent(new Dictionary<string, string> {
                { "grant_type", "client_credentials" }
                });

                // Send the token request and retrieve the access token
                var tokenResponse = await new HttpClient().SendAsync(tokenRequest);
                tokenResponse.EnsureSuccessStatusCode();
                var tokenJson = await tokenResponse.Content.ReadAsStringAsync();
                var accessToken = JObject.Parse(tokenJson)["access_token"].Value<string>();

                // Replace TRACK_ID with the actual ID of the track you want to retrieve
                var trackId = vote["trackId"];
                var tr = vote["trackId"];   //Working
                Console.WriteLine(tr);
                Console.WriteLine("Votes: " + vote["count"]);

                // Build the request to retrieve the track details from the Spotify API
                var trackRequest = new HttpRequestMessage(HttpMethod.Get, $"https://api.spotify.com/v1/tracks/{trackId}");
                trackRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

                // Send the track request and retrieve the track details
                var trackResponse = await new HttpClient().SendAsync(trackRequest);
                trackResponse.EnsureSuccessStatusCode();
                var trackJson = await trackResponse.Content.ReadAsStringAsync();
                var track = JObject.Parse(trackJson);

                // Extract the cover image, track name, and artist from the track details
                var coverImage = track["album"]["images"][1]["url"].Value
                <string>();
                var trackName = track["name"].Value<string>();
                //var artist = track["artists"][0]["name"].Value<string>();
                string artist = string.Join(", ", track["artists"].Select(a => a["name"].Value<string>()));
                var previewUrl = track["preview_url"];


                pnumber++;
                Console.WriteLine("loop  " + pnumber);
                //<h1>@trackName</h1>
                //<h2>@artist</h2>
                //<h1 class="count">@vote["count"]</h1>
                        <div class="songs">
                            <div class="divnum">
                                <h1 class="pnumber">@pnumber.</h1>
                            </div>
                            <div class="divcount">
                                <h1 class="count" id="count-@trackId">@vote["count"]</h1>
                            </div>
                            <div class="divimg">
                                <img src="@coverImage" onclick="playPreview('@previewUrl')" alt="@trackName by @artist" style="width: 14vw; height: 14vw;" />
                                <span class="material-symbols-rounded" onclick="playPreview('@previewUrl', '@trackId')" id="play-@trackId">
                                    play_arrow
                                </span>
                                <span class="material-symbols-rounded invisible" onclick="playPreview('@previewUrl', '@trackId')" id="pause-@trackId">
                                    pause
                                </span>
                            </div>
                            <div class="divdata">
                                <a>
                                    <h1 class="trackName">@trackName</h1>
                                </a>
                                <span>
                                    <h2 class="artist">@artist</h2>
                                </span>
                            </div>
                            

                        </div>                

            }
        }
    </tbody>
</table>

@section scripts{
    <script>
        let currentAudio;
        var $play;
        var $pause;
        var switched = false;
        var $last_play;
        var $last_pause;

        function playPreview(url, trackId) {
            $last_play = $play;
            $last_pause = $pause;
            $play = document.querySelector(`#play-${trackId}`);
            $pause = document.querySelector(`#pause-${trackId}`);

            if (currentAudio && currentAudio.src === url) {
                if (currentAudio.paused) {
                    currentAudio.play();
                    $play.classList.add('invisible');
                    $pause.classList.remove('invisible');
                } else {
                    currentAudio.pause();
                    currentAudio.currentTime = 0;
                    $play.classList.remove('invisible');
                    $pause.classList.add('invisible');
                }
            } else {
                if (currentAudio) {                    
                    currentAudio.pause();
                    currentAudio.currentTime = 0;
                    console.log("switched");
                    $last_play.classList.remove('invisible');
                    $last_pause.classList.add('invisible');


                }
                currentAudio = new Audio(url);
                currentAudio.volume = 0.45;
                currentAudio.play();
                $play.classList.add('invisible');
                $pause.classList.remove('invisible');
                currentAudio.addEventListener('ended', function() {
                    $play.classList.remove('invisible');
                    $pause.classList.add('invisible');
                });
            }
        }
    </script>
}